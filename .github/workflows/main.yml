name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15]
        compiler: [gcc, clang]
        build_tool: [cmake, bazel]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set Environment
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "::set-env name=CC::gcc"
          echo "::set-env name=CXX::g++"
        else
          echo "::set-env name=CC::clang"
          echo "::set-env name=CXX::clang++"
        fi

    - name: Install Tools (macOS)
      if: runner.os == 'macOS'
      run: |
        if [ "${{ matrix.build_tool }}" = "cmake" ]; then
          brew install cmake
        fi

        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc@9
          echo "::set-env name=CC::/usr/local/bin/gcc-9"
          echo "::set-env name=CXX::/usr/local/bin/g++-9"
        fi

    - name: Setup Bazel
      if: matrix.build_tool == 'bazel'
      env:
          BAZEL_VERSION: "3.4.1"
      run: |
        if [[ "${{ matrix.os }}" == "macos"* ]]; then
          OS=darwin
        else
          OS=linux
        fi

        URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-${OS}-x86_64.sh"

        wget -O install.sh "${URL}"
        chmod +x install.sh
        ./install.sh --user
        rm -f install.sh

        cat .bazelrc.ci >> .bazelrc

        echo "::set-env name=CXX::$CC"

    - name: Build and Test (CMake)
      if: matrix.build_tool == 'cmake'
      run: |
        cmake -S . -B build
        cmake --build build
        cd build && GTEST_COLOR=1 ctest --verbose

    - name: Build and Test (Bazel)
      if: matrix.build_tool == 'bazel'
      run: |
        bazel build //examples:all
        bazel test //...

  format:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Install clang-format
      run: |
        sudo apt-get install -y clang-format

    - name: Run clang-format
      run: |
        clang-format --version
        find examples include tests \(  -name "*.cc" -o -name "*.h" \) -exec clang-format -i {} \;
        git update-index --really-refresh
        git --no-pager diff

  coverage:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install lcov
      run: |
        sudo apt-get install -y lcov

    - name: Configure CMake build
      run: |
        cmake -S . -B build -DBUILD_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug -DBUILD_COMPILE_TESTS=0

    - name: Cleanup CMake compiler check
      run: |
        find . -name 'CMakeCCompilerId.gcno' -exec rm {} \;

    - name: Build coverage report
      run: |
        cd build && make coverage && lcov --list coverage.info

    - uses: codecov/codecov-action@v1
      with:
        file: ./build/coverage.info
        fail_ci_if_error: true
